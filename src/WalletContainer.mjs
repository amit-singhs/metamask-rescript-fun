// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/rescript/lib/es6/curry.js";
import * as React from "react";
import * as Metamask from "./Metamask.mjs";
import * as Caml_array from "../node_modules/rescript/lib/es6/caml_array.js";
import * as Belt_Option from "../node_modules/rescript/lib/es6/belt_Option.js";
import * as TransactionContainer from "./TransactionContainer.mjs";

import {ethers} from 'ethers'
;

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            accountAddress: state.accountAddress,
            accountBalance: state.accountBalance,
            enableTransaction: true
          };
  } else if (action.TAG === /* SetAccountAddress */0) {
    return {
            accountAddress: action._0,
            accountBalance: state.accountBalance,
            enableTransaction: state.enableTransaction
          };
  } else {
    return {
            accountAddress: state.accountAddress,
            accountBalance: action._0,
            enableTransaction: state.enableTransaction
          };
  }
}

function WalletContainer(Props) {
  var match = React.useReducer(reducer, {
        accountAddress: undefined,
        accountBalance: undefined,
        enableTransaction: false
      });
  var dispatch = match[1];
  var state = match[0];
  React.useEffect(function () {
        console.log("From inside useEffect code block, line 66: ");
        
      });
  var setAccount = function (account) {
    Curry._1(dispatch, {
          TAG: /* SetAccountAddress */0,
          _0: Caml_array.get(account, 0)
        });
    Metamask.getAccountBalanceP(account).then(function (fetchedBalanceHex) {
          var readableBalance = ethers.utils.formatEther(fetchedBalanceHex);
          Curry._1(dispatch, {
                TAG: /* SetAccountBalance */1,
                _0: readableBalance
              });
          Curry._1(dispatch, /* SetTransactionFlag */0);
          return Promise.resolve(undefined);
        });
    
  };
  window.ethereum.on("accountsChanged", setAccount);
  window.ethereum.on("chainChanged", (function (param) {
          window.location.reload();
          
        }));
  var handlers_connectToMetamaskWallet = function (param) {
    Metamask.connectToMetamaskWalletP(undefined).then(function (fetchedAccount) {
          setAccount(fetchedAccount);
          return Promise.resolve(undefined);
        });
    
  };
  var handlers_renderTransactionComponent = function (transactionFlag) {
    if (transactionFlag) {
      return React.createElement(TransactionContainer.make, {});
    } else {
      return React.createElement("div", undefined);
    }
  };
  return React.createElement("div", undefined, React.createElement("p", {
                  className: "p-5 text-3xl"
                }, "Welcome to Metamask test"), React.createElement("div", {
                  className: "p-5"
                }, React.createElement("button", {
                      className: "p-5 bg-blue-400 rounded-lg text-white",
                      onClick: handlers_connectToMetamaskWallet
                    }, "Connect to Metamask")), React.createElement("div", {
                  className: "p-5 text-3xl "
                }, React.createElement("p", undefined, "Account address: ", Belt_Option.getWithDefault(state.accountAddress, "value unavailable(Metamask not connected)")), React.createElement("p", undefined, "Account balance: ", Belt_Option.getWithDefault(state.accountBalance, "value unavailable(Metamask not connected)")), Curry._1(handlers_renderTransactionComponent, state.enableTransaction)));
}

var make = WalletContainer;

export {
  reducer ,
  make ,
  
}
/*  Not a pure module */
